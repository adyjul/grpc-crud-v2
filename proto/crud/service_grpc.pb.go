// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: proto/service.proto

package crud

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CrudServiceClient is the client API for CrudService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrudServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	ReadAll(ctx context.Context, in *ReadAllRequest, opts ...grpc.CallOption) (*ReadAllResponse, error)
	ReadWithCategory(ctx context.Context, in *ReadWithCategoryRequest, opts ...grpc.CallOption) (*ReadWithCategoryResponse, error)
	ReadWithJenis(ctx context.Context, in *ReadWithJenisRequest, opts ...grpc.CallOption) (*ReadWithJenisResponse, error)
	ReadWithMaterial(ctx context.Context, in *ReadWithMaterialRequest, opts ...grpc.CallOption) (*ReadWithMaterialResponse, error)
	ReadWithBatch(ctx context.Context, in *ReadWithBatchRequest, opts ...grpc.CallOption) (*ReadWithBatchResponse, error)
	ReadExpiredBarang(ctx context.Context, in *ReadExpiredBarangRequest, opts ...grpc.CallOption) (*ReadExpiredBarangResponse, error)
	ReadNotExpiredBarang(ctx context.Context, in *ReadNotExpiredBarangRequest, opts ...grpc.CallOption) (*ReadNotExpiredBarangResponse, error)
	// logika update
	UpdateHargaBatch(ctx context.Context, in *UpdateHargaBatchRequest, opts ...grpc.CallOption) (*UpdateHargaBatchResponse, error)
	// logika create bulk
	CreateBulkRef(ctx context.Context, in *CreateBulkRefRequest, opts ...grpc.CallOption) (*CreateBulkRefResponse, error)
}

type crudServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCrudServiceClient(cc grpc.ClientConnInterface) CrudServiceClient {
	return &crudServiceClient{cc}
}

func (c *crudServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/crud.CrudService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudServiceClient) ReadAll(ctx context.Context, in *ReadAllRequest, opts ...grpc.CallOption) (*ReadAllResponse, error) {
	out := new(ReadAllResponse)
	err := c.cc.Invoke(ctx, "/crud.CrudService/ReadAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudServiceClient) ReadWithCategory(ctx context.Context, in *ReadWithCategoryRequest, opts ...grpc.CallOption) (*ReadWithCategoryResponse, error) {
	out := new(ReadWithCategoryResponse)
	err := c.cc.Invoke(ctx, "/crud.CrudService/ReadWithCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudServiceClient) ReadWithJenis(ctx context.Context, in *ReadWithJenisRequest, opts ...grpc.CallOption) (*ReadWithJenisResponse, error) {
	out := new(ReadWithJenisResponse)
	err := c.cc.Invoke(ctx, "/crud.CrudService/ReadWithJenis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudServiceClient) ReadWithMaterial(ctx context.Context, in *ReadWithMaterialRequest, opts ...grpc.CallOption) (*ReadWithMaterialResponse, error) {
	out := new(ReadWithMaterialResponse)
	err := c.cc.Invoke(ctx, "/crud.CrudService/ReadWithMaterial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudServiceClient) ReadWithBatch(ctx context.Context, in *ReadWithBatchRequest, opts ...grpc.CallOption) (*ReadWithBatchResponse, error) {
	out := new(ReadWithBatchResponse)
	err := c.cc.Invoke(ctx, "/crud.CrudService/ReadWithBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudServiceClient) ReadExpiredBarang(ctx context.Context, in *ReadExpiredBarangRequest, opts ...grpc.CallOption) (*ReadExpiredBarangResponse, error) {
	out := new(ReadExpiredBarangResponse)
	err := c.cc.Invoke(ctx, "/crud.CrudService/ReadExpiredBarang", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudServiceClient) ReadNotExpiredBarang(ctx context.Context, in *ReadNotExpiredBarangRequest, opts ...grpc.CallOption) (*ReadNotExpiredBarangResponse, error) {
	out := new(ReadNotExpiredBarangResponse)
	err := c.cc.Invoke(ctx, "/crud.CrudService/ReadNotExpiredBarang", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudServiceClient) UpdateHargaBatch(ctx context.Context, in *UpdateHargaBatchRequest, opts ...grpc.CallOption) (*UpdateHargaBatchResponse, error) {
	out := new(UpdateHargaBatchResponse)
	err := c.cc.Invoke(ctx, "/crud.CrudService/UpdateHargaBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudServiceClient) CreateBulkRef(ctx context.Context, in *CreateBulkRefRequest, opts ...grpc.CallOption) (*CreateBulkRefResponse, error) {
	out := new(CreateBulkRefResponse)
	err := c.cc.Invoke(ctx, "/crud.CrudService/CreateBulkRef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrudServiceServer is the server API for CrudService service.
// All implementations must embed UnimplementedCrudServiceServer
// for forward compatibility
type CrudServiceServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	ReadAll(context.Context, *ReadAllRequest) (*ReadAllResponse, error)
	ReadWithCategory(context.Context, *ReadWithCategoryRequest) (*ReadWithCategoryResponse, error)
	ReadWithJenis(context.Context, *ReadWithJenisRequest) (*ReadWithJenisResponse, error)
	ReadWithMaterial(context.Context, *ReadWithMaterialRequest) (*ReadWithMaterialResponse, error)
	ReadWithBatch(context.Context, *ReadWithBatchRequest) (*ReadWithBatchResponse, error)
	ReadExpiredBarang(context.Context, *ReadExpiredBarangRequest) (*ReadExpiredBarangResponse, error)
	ReadNotExpiredBarang(context.Context, *ReadNotExpiredBarangRequest) (*ReadNotExpiredBarangResponse, error)
	// logika update
	UpdateHargaBatch(context.Context, *UpdateHargaBatchRequest) (*UpdateHargaBatchResponse, error)
	// logika create bulk
	CreateBulkRef(context.Context, *CreateBulkRefRequest) (*CreateBulkRefResponse, error)
	mustEmbedUnimplementedCrudServiceServer()
}

// UnimplementedCrudServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCrudServiceServer struct {
}

func (UnimplementedCrudServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCrudServiceServer) ReadAll(context.Context, *ReadAllRequest) (*ReadAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAll not implemented")
}
func (UnimplementedCrudServiceServer) ReadWithCategory(context.Context, *ReadWithCategoryRequest) (*ReadWithCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadWithCategory not implemented")
}
func (UnimplementedCrudServiceServer) ReadWithJenis(context.Context, *ReadWithJenisRequest) (*ReadWithJenisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadWithJenis not implemented")
}
func (UnimplementedCrudServiceServer) ReadWithMaterial(context.Context, *ReadWithMaterialRequest) (*ReadWithMaterialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadWithMaterial not implemented")
}
func (UnimplementedCrudServiceServer) ReadWithBatch(context.Context, *ReadWithBatchRequest) (*ReadWithBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadWithBatch not implemented")
}
func (UnimplementedCrudServiceServer) ReadExpiredBarang(context.Context, *ReadExpiredBarangRequest) (*ReadExpiredBarangResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadExpiredBarang not implemented")
}
func (UnimplementedCrudServiceServer) ReadNotExpiredBarang(context.Context, *ReadNotExpiredBarangRequest) (*ReadNotExpiredBarangResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadNotExpiredBarang not implemented")
}
func (UnimplementedCrudServiceServer) UpdateHargaBatch(context.Context, *UpdateHargaBatchRequest) (*UpdateHargaBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHargaBatch not implemented")
}
func (UnimplementedCrudServiceServer) CreateBulkRef(context.Context, *CreateBulkRefRequest) (*CreateBulkRefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBulkRef not implemented")
}
func (UnimplementedCrudServiceServer) mustEmbedUnimplementedCrudServiceServer() {}

// UnsafeCrudServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrudServiceServer will
// result in compilation errors.
type UnsafeCrudServiceServer interface {
	mustEmbedUnimplementedCrudServiceServer()
}

func RegisterCrudServiceServer(s grpc.ServiceRegistrar, srv CrudServiceServer) {
	s.RegisterService(&CrudService_ServiceDesc, srv)
}

func _CrudService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crud.CrudService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudService_ReadAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServiceServer).ReadAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crud.CrudService/ReadAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServiceServer).ReadAll(ctx, req.(*ReadAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudService_ReadWithCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadWithCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServiceServer).ReadWithCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crud.CrudService/ReadWithCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServiceServer).ReadWithCategory(ctx, req.(*ReadWithCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudService_ReadWithJenis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadWithJenisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServiceServer).ReadWithJenis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crud.CrudService/ReadWithJenis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServiceServer).ReadWithJenis(ctx, req.(*ReadWithJenisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudService_ReadWithMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadWithMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServiceServer).ReadWithMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crud.CrudService/ReadWithMaterial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServiceServer).ReadWithMaterial(ctx, req.(*ReadWithMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudService_ReadWithBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadWithBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServiceServer).ReadWithBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crud.CrudService/ReadWithBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServiceServer).ReadWithBatch(ctx, req.(*ReadWithBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudService_ReadExpiredBarang_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadExpiredBarangRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServiceServer).ReadExpiredBarang(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crud.CrudService/ReadExpiredBarang",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServiceServer).ReadExpiredBarang(ctx, req.(*ReadExpiredBarangRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudService_ReadNotExpiredBarang_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadNotExpiredBarangRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServiceServer).ReadNotExpiredBarang(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crud.CrudService/ReadNotExpiredBarang",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServiceServer).ReadNotExpiredBarang(ctx, req.(*ReadNotExpiredBarangRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudService_UpdateHargaBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHargaBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServiceServer).UpdateHargaBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crud.CrudService/UpdateHargaBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServiceServer).UpdateHargaBatch(ctx, req.(*UpdateHargaBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudService_CreateBulkRef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBulkRefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServiceServer).CreateBulkRef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crud.CrudService/CreateBulkRef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServiceServer).CreateBulkRef(ctx, req.(*CreateBulkRefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CrudService_ServiceDesc is the grpc.ServiceDesc for CrudService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CrudService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crud.CrudService",
	HandlerType: (*CrudServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CrudService_Create_Handler,
		},
		{
			MethodName: "ReadAll",
			Handler:    _CrudService_ReadAll_Handler,
		},
		{
			MethodName: "ReadWithCategory",
			Handler:    _CrudService_ReadWithCategory_Handler,
		},
		{
			MethodName: "ReadWithJenis",
			Handler:    _CrudService_ReadWithJenis_Handler,
		},
		{
			MethodName: "ReadWithMaterial",
			Handler:    _CrudService_ReadWithMaterial_Handler,
		},
		{
			MethodName: "ReadWithBatch",
			Handler:    _CrudService_ReadWithBatch_Handler,
		},
		{
			MethodName: "ReadExpiredBarang",
			Handler:    _CrudService_ReadExpiredBarang_Handler,
		},
		{
			MethodName: "ReadNotExpiredBarang",
			Handler:    _CrudService_ReadNotExpiredBarang_Handler,
		},
		{
			MethodName: "UpdateHargaBatch",
			Handler:    _CrudService_UpdateHargaBatch_Handler,
		},
		{
			MethodName: "CreateBulkRef",
			Handler:    _CrudService_CreateBulkRef_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
